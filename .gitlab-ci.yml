stages:
  - build

# global variables
variables: &global-variables
  GIT_STRATEGY: clone
  PYTHON_VER: 3
  IDF_VERSION: v5.0.5

.before_script_preparation: &before_script_preparation
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

.setup_tools: &setup_tools
  - cd $IDF_PATH
  - git checkout $IDF_VERSION
  - git submodule update --init --recursive
  - rm /opt/esp/idf-env.json
  - $IDF_PATH/tools/idf_tools.py --non-interactive install cmake || exit 1
  - $IDF_PATH/tools/idf_tools.py --non-interactive install --targets esp32s3 && eval "$($IDF_PATH/tools/idf_tools.py --non-interactive export)" || exit 1
  - $IDF_PATH/tools/idf_tools.py install-python-env
  - cd -

.build_esp_box: &build_esp_box
  - rm -rf managed_components # Building littlefs will generate binary `mklittlefs`
  - idf.py -DBOARD=esp-box build
  - mv build esp_box_build
  - mv sdkconfig esp_box_sdkconfig

.build_esp32s3_devkitc: &build_esp32s3_devkitc
  - rm -rf managed_components # Building littlefs will generate binary `mklittlefs`
  - idf.py -DBOARD=esp32s3-devkitc build
  - mv build esp32s3_devkitc_build
  - mv sdkconfig esp32s3_devkitc_sdkconfig

cache:
  key: "${CI_PROJECT_NAME}-esp-idf-${IDF_VERSION}"
  paths:
    - .cache/pip
    - esp-idf/
  policy: pull

build_with_v4.4:
  stage: build
  image: espressif/idf:release-v4.4
  tags:
    - build

  variables:
    <<: *global-variables

  before_script:
    - *before_script_preparation

  script:
    - *setup_tools
    - *build_esp_box
    - *build_esp32s3_devkitc
